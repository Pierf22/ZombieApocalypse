Index: src/main/java/ZombieApocalypse/ResourcesLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.sound.sampled.*;\r\nimport javax.swing.*;\r\nimport javax.swing.text.StyleConstants;\r\nimport java.awt.*;\r\nimport java.io.BufferedInputStream;\r\nimport java.io.IOException;\r\n\r\npublic class ResourcesLoader {\r\n    private static final ResourcesLoader instance = new ResourcesLoader();\r\n    private ResourcesLoader() {\r\n    }\r\n    public static ResourcesLoader getInstance() {\r\n        return instance;\r\n    }\r\n\r\n    public Font getFont(String path, int size, int type) {\r\n        Font font=null;\r\n            try{\r\n                font = Font.createFont(Font.TRUETYPE_FONT, new BufferedInputStream(getClass().getResourceAsStream(path))).deriveFont(type,size);\r\n            }catch (IOException | FontFormatException e){\r\n                e.printStackTrace();}\r\n            return font;\r\n    }\r\n    public ImageIcon getImageIcon(String name, int width, int height, boolean b){\r\n        ImageIcon image=null;\r\n        Image logoS=null;\r\n        try{\r\n                image = new ImageIcon(getClass().getResource(name));\r\n                Image im = image.getImage();\r\n                if(b)\r\n                    logoS = im.getScaledInstance(width, height, Image.SCALE_SMOOTH);\r\n                else\r\n                    logoS = im.getScaledInstance(width, height, Image.SCALE_FAST);\r\n            image = new ImageIcon(logoS);\r\n\r\n        }catch (NullPointerException e){\r\n        } return image;\r\n    }\r\n\r\n    public Image getImage(String name, int width, int height, boolean b){\r\n        Image image=null;\r\n        try{\r\n            image= ImageIO.read(getClass().getResourceAsStream(name));\r\n\r\n            image=image.getScaledInstance(width, height, Image.SCALE_SMOOTH);\r\n\r\n\r\n    } catch (IOException  | IllegalArgumentException ex){\r\n        System.exit(1);\r\n    }\r\n        return  image;\r\n}\r\n    public Clip getAudioClip(String path){\r\n        AudioInputStream audioIn;\r\n        Clip clip;\r\n        try {\r\n            audioIn = AudioSystem.getAudioInputStream(getClass().getResourceAsStream(\"/resources/\" + name));\r\n            clip = AudioSystem.getClip();\r\n            clip.open(audioIn);\r\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            clip = null;\r\n        } return clip;\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/ResourcesLoader.java b/src/main/java/ZombieApocalypse/ResourcesLoader.java
--- a/src/main/java/ZombieApocalypse/ResourcesLoader.java	
+++ b/src/main/java/ZombieApocalypse/ResourcesLoader.java	
@@ -21,7 +21,9 @@
             try{
                 font = Font.createFont(Font.TRUETYPE_FONT, new BufferedInputStream(getClass().getResourceAsStream(path))).deriveFont(type,size);
             }catch (IOException | FontFormatException e){
-                e.printStackTrace();}
+                System.exit(103);
+
+            }
             return font;
     }
     public ImageIcon getImageIcon(String name, int width, int height, boolean b){
@@ -37,6 +39,7 @@
             image = new ImageIcon(logoS);
 
         }catch (NullPointerException e){
+            System.exit(102);
         } return image;
     }
 
@@ -49,7 +52,7 @@
 
 
     } catch (IOException  | IllegalArgumentException ex){
-        System.exit(1);
+            System.exit(101);
     }
         return  image;
 }
@@ -57,11 +60,12 @@
         AudioInputStream audioIn;
         Clip clip;
         try {
-            audioIn = AudioSystem.getAudioInputStream(getClass().getResourceAsStream("/resources/" + name));
+            audioIn = AudioSystem.getAudioInputStream(getClass().getResourceAsStream(path));
             clip = AudioSystem.getClip();
             clip.open(audioIn);
         } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
             clip = null;
+            System.exit(100);
         } return clip;
 
     }
Index: src/main/java/ZombieApocalypse/View/MenuBarAnimation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class MenuBarAnimation {\r\n    private static int numImmagini=3;\r\n    ImageIcon[] images=new ImageIcon[numImmagini];\r\n\r\n\r\n    public MenuBarAnimation(){\r\n        Image logoS=null;\r\n        try{\r\n    for(int i=0; i<numImmagini; i++) {\r\n        images[i] = new ImageIcon(getClass().getResource(\"/BarraDistatoeMenu/Icon\"+i+\".png\"));\r\n        Image im = images[i].getImage();\r\n        if(i==2)\r\n            logoS = im.getScaledInstance(55, 55, Image.SCALE_SMOOTH);\r\n        else\r\n            logoS = im.getScaledInstance(30, 25, Image.SCALE_SMOOTH);\r\n        images[i] = new ImageIcon(logoS);\r\n\r\n\r\n    }\r\n    }catch (NullPointerException e){\r\n    }}\r\n\r\n\r\n    public ImageIcon setFullHeart() {\r\n        return images[0];\r\n    }\r\n    public ImageIcon setEmptyHeart() {\r\n        return images[1];\r\n    }\r\n    public ImageIcon setEmptySlot() {\r\n        return images[2];\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java b/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java
--- a/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java	
+++ b/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java	
@@ -1,38 +1,26 @@
 package ZombieApocalypse.View;
 
+import ZombieApocalypse.ResourcesLoader;
+
 import javax.swing.*;
 import java.awt.*;
 
 public class MenuBarAnimation {
     private static int numImmagini=3;
+    enum Icon{FULLHEART, EMPTYHEART, EMPTYSLOT};
     ImageIcon[] images=new ImageIcon[numImmagini];
 
 
-    public MenuBarAnimation(){
-        Image logoS=null;
-        try{
-    for(int i=0; i<numImmagini; i++) {
-        images[i] = new ImageIcon(getClass().getResource("/BarraDistatoeMenu/Icon"+i+".png"));
-        Image im = images[i].getImage();
-        if(i==2)
-            logoS = im.getScaledInstance(55, 55, Image.SCALE_SMOOTH);
-        else
-            logoS = im.getScaledInstance(30, 25, Image.SCALE_SMOOTH);
-        images[i] = new ImageIcon(logoS);
 
 
-    }
-    }catch (NullPointerException e){
-    }}
 
 
-    public ImageIcon setFullHeart() {
-        return images[0];
-    }
-    public ImageIcon setEmptyHeart() {
-        return images[1];
+    public ImageIcon setIcon(Icon i, int w, int h) {
+        System.out.println(i.ordinal());
+        if(images[i.ordinal()]==null){
+            images[i.ordinal()]= ResourcesLoader.getInstance().getImageIcon("/BarraDistatoeMenu/Icon"+i.ordinal()+".png",w,h,true );
+                }
+        return images[i.ordinal()];
     }
-    public ImageIcon setEmptySlot() {
-        return images[2];
-    }
+
 }
Index: src/main/java/ZombieApocalypse/View/MenuBarView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport ZombieApocalypse.ResourcesLoader;\r\nimport ZombieApocalypse.Model.Game;\r\nimport ZombieApocalypse.Settings;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\nimport static ZombieApocalypse.Utility.PlayerData.nick;\r\n\r\npublic class MenuBarView extends JPanel {\r\n    Font font= ResourcesLoader.getInstance().getPixelFont();\r\n    static long start;\r\n    static MenuBarAnimation iconImages=new MenuBarAnimation();\r\n    JLabel playerName;\r\n     JPanel flashPanel;\r\n    JLabel ammoLabel;\r\n     static JLabel [] healthLabel;\r\n    JLabel pointLabel;\r\n    static JLabel timeLabel;\r\n     JLabel gunLabel1;\r\n    JLabel gunLabel2;\r\n    public MenuBarView(){\r\n        //Crea tre Jpanel\r\n        //Nel primo metto Vita e Munizioni con quattro label\r\n        //nel secondo lo Score\r\n        //nel terzo il tempo\r\n        playerName=new JLabel(nick);\r\n        playerName.setFont(font);\r\n        playerName.setForeground(Color.WHITE);\r\n        setMaximumSize(new Dimension(Settings.WINDOW_SIZEX, Settings.MENU_BAR_HEIGHT));\r\n        setPreferredSize(new Dimension(Settings.WINDOW_SIZEX, Settings.MENU_BAR_HEIGHT));\r\n        setMinimumSize(new Dimension(Settings.WINDOW_SIZEX, Settings.MENU_BAR_HEIGHT));\r\n        setBackground(Color.BLACK);\r\n        setLayout(new BoxLayout(this, BoxLayout.LINE_AXIS));\r\n\r\n\r\n        //Pannello della Salute\r\n        healthLabel=new JLabel[Game.getInstance().getPlayerMaxLife()];\r\n        JPanel healthAmmoPanel=new JPanel();\r\n        healthAmmoPanel.setLayout(new GridBagLayout());\r\n        healthAmmoPanel.setMaximumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));\r\n        healthAmmoPanel.setMinimumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));\r\n\r\n        GridBagConstraints c=new GridBagConstraints();\r\n        healthAmmoPanel.setBackground(Color.BLACK);\r\n        JLabel jLabelH=new JLabel(\"Health\");\r\n        jLabelH.setFont(font);\r\n        jLabelH.setForeground(Color.GRAY);\r\n        c.gridx=0;\r\n        c.gridy=0;\r\n        healthAmmoPanel.add(jLabelH, c);\r\n\r\n        JPanel array=new JPanel();\r\n        array.setLayout(new BoxLayout(array, BoxLayout.X_AXIS));\r\n        array.setBackground(Color.BLACK);\r\n        for(int i=0; i<Game.getInstance().getPlayerMaxLife(); i++){\r\n            healthLabel[i]=new JLabel();\r\n            array.add(healthLabel[i]);\r\n        }\r\n        c.gridx=1;\r\n        c.gridy=0;\r\n        c.insets=new Insets(0,5,0,0);\r\n        healthAmmoPanel.add(array, c);\r\n        flashPanel=new JPanel();\r\n        flashPanel.setOpaque(false);\r\n        healthAmmoPanel.add(flashPanel, c);\r\n\r\n        //Pannello delle Munizioni\r\n\r\n        JLabel jLabelA=new JLabel(\" Ammo\");\r\n        jLabelA.setFont(font);\r\n        jLabelA.setForeground(Color.GRAY);\r\n        ammoLabel=new JLabel();\r\n        c.gridx=0;\r\n        c.gridy=1;\r\n        healthAmmoPanel.add(jLabelA, c);\r\n        c.gridx=1;\r\n        c.gridy=1;\r\n\r\n        healthAmmoPanel.add(ammoLabel, c);\r\n        //Pannello delle Armi primo\r\n        JPanel gunPanel=new JPanel();\r\n        gunPanel.setMaximumSize(new Dimension(90, Settings.MENU_BAR_HEIGHT));\r\n\r\n        gunPanel.setBackground(Color.BLACK);\r\n        gunPanel.setLayout(new GridBagLayout());\r\n        JLabel jLabelG=new JLabel(\" use\");\r\n        jLabelG.setFont(font);\r\n        jLabelG.setForeground(Color.GRAY);\r\n        JLabel jLabelW=new JLabel(\"W\");\r\n        jLabelW.setFont(font);\r\n        jLabelW.setForeground(Color.WHITE);\r\n        gunLabel1=new JLabel();\r\n        JLabel jLabelD=new JLabel(\"drop\");\r\n        jLabelD.setFont(font);\r\n        jLabelD.setForeground(Color.GRAY);\r\n        JLabel jLabelS=new JLabel(\"S\");\r\n        jLabelS.setFont(font);\r\n        jLabelS.setForeground(Color.WHITE);\r\n        c.gridx=0;\r\n        c.gridy=0;\r\n        gunPanel.add(jLabelG, c);\r\n        c.gridx=0;\r\n        c.gridy=1;\r\n        gunPanel.add(jLabelD, c);\r\n        c.gridy=0;\r\n        c.gridx=1;\r\n        gunPanel.add(jLabelW, c);\r\n        c.gridy=1;\r\n        c.gridx=1;\r\n        gunPanel.add(jLabelS, c);\r\n        //Pannello delle armi 2\r\n        gunLabel2=new JLabel();\r\n        JPanel gunPanel1=new JPanel();\r\n        gunPanel1.setMaximumSize(new Dimension(100, Settings.MENU_BAR_HEIGHT));\r\n        gunPanel1.setBackground(Color.BLACK);\r\n        gunPanel1.setLayout(new GridBagLayout());\r\n        JLabel jLabelE=new JLabel(\"E\");\r\n        jLabelE.setFont(font);\r\n        jLabelE.setForeground(Color.WHITE);\r\n        c.gridx=0;\r\n        c.gridy=0;\r\n        gunPanel1.add(jLabelE, c);\r\n        JLabel jLabelDd=new JLabel(\"D\");\r\n        jLabelDd.setFont(font);\r\n        jLabelDd.setForeground(Color.WHITE);\r\n        c.gridx=0;\r\n        c.gridy=1;\r\n        gunPanel1.add(jLabelDd, c);\r\n        c.gridy=0;\r\n        c.gridx=1;\r\n        JLabel jLabelGg=new JLabel(\"use\");\r\n        jLabelGg.setFont(font);\r\n        jLabelGg.setForeground(Color.GRAY);\r\n        gunPanel1.add(jLabelGg, c);\r\n        c.gridy=1;\r\n        c.gridx=1;\r\n        JLabel jLabelz=new JLabel(\" drop\");\r\n        jLabelz.setFont(font);\r\n        jLabelz.setForeground(Color.GRAY);\r\n        gunPanel1.add(jLabelz, c);\r\n\r\n        //Pannello del Punteggio\r\n        JPanel pointPanel=new JPanel();\r\n        pointPanel.setMaximumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));\r\n\r\n        pointPanel.setLayout(new GridBagLayout());\r\n        pointPanel.setBackground(Color.BLACK);\r\n        JLabel jLabelP=new JLabel(\"Points\");\r\n        jLabelP.setFont(font);\r\n        jLabelP.setForeground(Color.GRAY);\r\n        pointLabel=new JLabel();\r\n        c.insets=new Insets(0,40,0,0);\r\n        c.gridx = 0;\r\n        c.gridy = 0;\r\n        pointPanel.add(jLabelP, c);\r\n        c.gridx = 0;\r\n        c.gridy = 1;\r\n        pointPanel.add(pointLabel,c);\r\n        //Pannello del tempo\r\n        JPanel timePanel=new JPanel();\r\n        timePanel.setMaximumSize(new Dimension(100, Settings.MENU_BAR_HEIGHT));\r\n\r\n        timePanel.setLayout(new GridBagLayout());\r\n        timePanel.setBackground(Color.BLACK);\r\n        JLabel jLabelT=new JLabel(\"Time\");\r\n        jLabelT.setFont(font);\r\n        jLabelT.setForeground(Color.GRAY);\r\n        timeLabel=new JLabel();\r\n        timeLabel.setFont(font);\r\n        c.insets=new Insets(0,40,0,0);\r\n        c.gridx = 0;\r\n        c.gridy = 0;\r\n        timePanel.add(jLabelT, c);\r\n        c.gridx = 0;\r\n        c.gridy = 1;\r\n        timePanel.add(timeLabel,c);\r\n        add(playerName);\r\n        add(healthAmmoPanel);\r\n        add(gunPanel);\r\n        add(gunLabel1);\r\n        add(new JLabel(\"  \"));\r\n        add(gunLabel2);\r\n        add(gunPanel1);\r\n        add(pointPanel);\r\n        add(timePanel);\r\n    }\r\n\r\n    public static void lifeUpdate(boolean b) {\r\n        if(b && Game.getInstance().getPlayerMaxLife()<Game.getInstance().getPlayerLife()){\r\n            healthLabel[Game.getInstance().getPlayerLife()].setIcon(iconImages.setFullHeart());\r\n\r\n        }\r\n        else if (!b && Game.getInstance().getPlayerLife()>-1){\r\n            healthLabel[Game.getInstance().getPlayerLife()+1].setIcon(iconImages.setEmptyHeart());\r\n\r\n        }\r\n\r\n    }\r\n    public void setBar() {\r\n        for(int i=0; i<Game.getInstance().getPlayerMaxLife(); i++){\r\n            if(i<Game.getInstance().getPlayerLife())\r\n            healthLabel[i].setIcon(iconImages.setFullHeart());\r\n            else\r\n                healthLabel[i].setIcon(iconImages.setEmptyHeart());\r\n\r\n        }\r\n\r\n\r\n        gunLabel1.setIcon(iconImages.setEmptySlot());\r\n        gunLabel2.setIcon(iconImages.setEmptySlot());\r\n        start=System.nanoTime();\r\n        timeLabel.setForeground(Color.WHITE);\r\n        timeLabel.setText(String.valueOf(start));\r\n\r\n    }\r\n    public static void updateTimeLable(long t){\r\n        timeLabel.setText(String.valueOf(t));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/MenuBarView.java b/src/main/java/ZombieApocalypse/View/MenuBarView.java
--- a/src/main/java/ZombieApocalypse/View/MenuBarView.java	
+++ b/src/main/java/ZombieApocalypse/View/MenuBarView.java	
@@ -10,9 +10,9 @@
 import static ZombieApocalypse.Utility.PlayerData.nick;
 
 public class MenuBarView extends JPanel {
-    Font font= ResourcesLoader.getInstance().getPixelFont();
+    Font font= ResourcesLoader.getInstance().getFont("/Font/PixelFont.otf", 20, Font.PLAIN);
     static long start;
-    static MenuBarAnimation iconImages=new MenuBarAnimation();
+    static MenuBarAnimation menuBarAnimation=new MenuBarAnimation();
     JLabel playerName;
      JPanel flashPanel;
     JLabel ammoLabel;
@@ -190,11 +190,12 @@
 
     public static void lifeUpdate(boolean b) {
         if(b && Game.getInstance().getPlayerMaxLife()<Game.getInstance().getPlayerLife()){
-            healthLabel[Game.getInstance().getPlayerLife()].setIcon(iconImages.setFullHeart());
+            healthLabel[Game.getInstance().getPlayerLife()].setIcon(menuBarAnimation.setIcon(MenuBarAnimation.Icon.FULLHEART, 20, 35));
 
         }
         else if (!b && Game.getInstance().getPlayerLife()>-1){
-            healthLabel[Game.getInstance().getPlayerLife()+1].setIcon(iconImages.setEmptyHeart());
+            healthLabel[Game.getInstance().getPlayerLife()+1].setIcon(menuBarAnimation.setIcon(MenuBarAnimation.Icon.EMPTYHEART, 20, 35));
+
 
         }
 
@@ -202,15 +203,15 @@
     public void setBar() {
         for(int i=0; i<Game.getInstance().getPlayerMaxLife(); i++){
             if(i<Game.getInstance().getPlayerLife())
-            healthLabel[i].setIcon(iconImages.setFullHeart());
+            healthLabel[i].setIcon(menuBarAnimation.setIcon(MenuBarAnimation.Icon.FULLHEART, 30, 30));
             else
-                healthLabel[i].setIcon(iconImages.setEmptyHeart());
+                healthLabel[i].setIcon(menuBarAnimation.setIcon(MenuBarAnimation.Icon.EMPTYHEART, 30, 30));
 
         }
 
 
-        gunLabel1.setIcon(iconImages.setEmptySlot());
-        gunLabel2.setIcon(iconImages.setEmptySlot());
+        gunLabel1.setIcon(menuBarAnimation.setIcon(MenuBarAnimation.Icon.EMPTYSLOT, 55, 55));
+        gunLabel2.setIcon(menuBarAnimation.setIcon(MenuBarAnimation.Icon.EMPTYSLOT, 55, 55));
         start=System.nanoTime();
         timeLabel.setForeground(Color.WHITE);
         timeLabel.setText(String.valueOf(start));
Index: src/main/java/ZombieApocalypse/View/CharacterAnimation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport ZombieApocalypse.Model.PlayerCharacter;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic class CharacterAnimation {\r\n    //Carica le animazioni richieste\r\n\r\n    private final ArrayList<Image> images = new ArrayList<>();\r\n    private int index = 0;\r\n\r\n    public CharacterAnimation(String action, int numberOfElements) {\r\n        try {\r\n            for (int i = 0; i < numberOfElements; i++) {\r\n                Image img = ImageIO.read(getClass().getResourceAsStream(\"/Player/\" + action + i + \".png\"));\r\n                images.add(img);\r\n            }\r\n        } catch(IOException exception) {\r\n            exception.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Image getDefaultImage() {\r\n        return images.get(0);\r\n    }\r\n\r\n    public Image update() {\r\n        index = (index+1) % images.size();\r\n        return images.get(index);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/CharacterAnimation.java b/src/main/java/ZombieApocalypse/View/CharacterAnimation.java
--- a/src/main/java/ZombieApocalypse/View/CharacterAnimation.java	
+++ b/src/main/java/ZombieApocalypse/View/CharacterAnimation.java	
@@ -1,6 +1,9 @@
 package ZombieApocalypse.View;
 
 import ZombieApocalypse.Model.PlayerCharacter;
+import ZombieApocalypse.ResourcesLoader;
+import ZombieApocalypse.Settings;
+import jdk.jfr.SettingControl;
 
 import javax.imageio.ImageIO;
 import java.awt.*;
@@ -14,14 +17,12 @@
     private int index = 0;
 
     public CharacterAnimation(String action, int numberOfElements) {
-        try {
             for (int i = 0; i < numberOfElements; i++) {
-                Image img = ImageIO.read(getClass().getResourceAsStream("/Player/" + action + i + ".png"));
+                String path=action+i;
+                Image img= ResourcesLoader.getInstance().getImage("/Player/"+path+".png", Settings.CELL_SIZEX, Settings.CELL_SIZEY, true);
                 images.add(img);
             }
-        } catch(IOException exception) {
-            exception.printStackTrace();
-        }
+
     }
 
     public Image getDefaultImage() {
Index: src/main/java/ZombieApocalypse/View/GraphicPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport ZombieApocalypse.Model.Game;\r\nimport ZombieApocalypse.Model.World;\r\nimport ZombieApocalypse.Settings;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\n\r\npublic class GraphicPanel extends JPanel {\r\n    //Disegna il mondo\r\n    private final CharacterView characterView = new CharacterView();\r\n    private final int numeroImmagini=4;\r\n    private final Image[] images=new Image[numeroImmagini];\r\n    public GraphicPanel()  {\r\n        try{\r\n            for(int i=0; i<numeroImmagini; i++){\r\n                String c=String.valueOf(i);\r\n                images[i]= ImageIO.read(getClass().getResourceAsStream(\"/AmbienteDiGioco/Terreno/Terreno\"+c+\".png\"));\r\n\r\n                images[i]=images[i].getScaledInstance(Settings.CELL_SIZEX, Settings.CELL_SIZEY, Image.SCALE_SMOOTH);\r\n\r\n            }} catch (IOException e){\r\n            System.exit(1);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        World world=new World();\r\n        for(int i = 0; i < world.getSize(); i++) {\r\n            int x = i * Settings.CELL_SIZEX;\r\n            for(int j = 0; j < world.getSize(); j++) {\r\n                int y = j * Settings.CELL_SIZEY;\r\n                if(world.isGround0(i, j)) {\r\n                    //Random random=new Random();\r\n                    //int value= random.nextInt(numeroImmagini);\r\n                    g.drawImage(images[0], x, y, null);\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n        g.drawImage(characterView.getCurrentImage(), Game.getInstance().getPlayerCharacter().getX(), Game.getInstance().getPlayerCharacter().getY(), characterView.width, characterView.height, null);\r\n\r\n    }\r\n    public void update() {\r\n        characterView.update();\r\n\r\n        repaint();\r\n    }}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/GraphicPanel.java b/src/main/java/ZombieApocalypse/View/GraphicPanel.java
--- a/src/main/java/ZombieApocalypse/View/GraphicPanel.java	
+++ b/src/main/java/ZombieApocalypse/View/GraphicPanel.java	
@@ -2,6 +2,7 @@
 
 import ZombieApocalypse.Model.Game;
 import ZombieApocalypse.Model.World;
+import ZombieApocalypse.ResourcesLoader;
 import ZombieApocalypse.Settings;
 
 import javax.imageio.ImageIO;
@@ -15,15 +16,10 @@
     private final int numeroImmagini=4;
     private final Image[] images=new Image[numeroImmagini];
     public GraphicPanel()  {
-        try{
             for(int i=0; i<numeroImmagini; i++){
                 String c=String.valueOf(i);
-                images[i]= ImageIO.read(getClass().getResourceAsStream("/AmbienteDiGioco/Terreno/Terreno"+c+".png"));
-
-                images[i]=images[i].getScaledInstance(Settings.CELL_SIZEX, Settings.CELL_SIZEY, Image.SCALE_SMOOTH);
-
-            }} catch (IOException e){
-            System.exit(1);
+                String path="/AmbienteDiGioco/Terreno/Terreno"+c+".png";
+                images[i]= ResourcesLoader.getInstance().getImage(path, Settings.CELL_SIZEX, Settings.CELL_SIZEY, true);
         }
 
     }
