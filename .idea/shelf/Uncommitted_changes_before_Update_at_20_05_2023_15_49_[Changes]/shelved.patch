Index: src/main/java/ZombieApocalypse/View/GameFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport ZombieApocalypse.Controller.PlayerController;\r\nimport ZombieApocalypse.GameLoop;\r\nimport ZombieApocalypse.Settings;\r\nimport ZombieApocalypse.LoginMenu.LoginLoop;\r\nimport ZombieApocalypse.LoginMenu.LoginPanel;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class GameFrame extends JPanel{\r\n    private static JFrame frameGame;\r\n    private static GameLoop gameLoopObject;\r\n    private static LoginPanel panel;\r\n    public static LoginLoop loop;\r\n\r\n    public static void loginLaunch(){\r\n        Toolkit toolkit = Toolkit.getDefaultToolkit();\r\n        Dimension screenDimension = toolkit.getScreenSize();\r\n        frameGame = new JFrame(\"Login\");\r\n        frameGame.setSize(Settings.WINDOW_SIZEX, Settings.WINDOW_SIZEY+Settings.MENU_BAR_HEIGHT);\r\n        frameGame.setUndecorated(true);\r\n\r\n        //Creo un loginPaint, parte interna della mia cornice\r\n        panel = new LoginPanel();\r\n        //Inserisco il panel appena creato all'intrerno del mio frame\r\n        frameGame.add(panel);\r\n\r\n        //Creo un oggetto loginLoop per usare un thread che gestisca l'animazione del titolo\r\n        loop = new LoginLoop(panel);\r\n        loop.start();\r\n\r\n        // Mettiamo la finestra al centro dello schermo\r\n        int x = (screenDimension.width - frameGame.getWidth())/2;\r\n        int y = (screenDimension.height - frameGame.getHeight())/2;\r\n        frameGame.setLocation(x, y);\r\n        frameGame.setVisible(true);\r\n        frameGame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    }\r\n\r\n    public static void gameLaunch(){\r\n        frameGame.remove(panel);\r\n        frameGame.repaint();\r\n        frameGame.setTitle(\"Game\");\r\n\r\n        MenuBarView menuBarView=new MenuBarView();\r\n        GraphicPanel graphicPanel=new GraphicPanel(menuBarView);\r\n        frameGame.setLayout(new BoxLayout(frameGame.getContentPane(), BoxLayout.PAGE_AXIS));\r\n\r\n        frameGame.add(graphicPanel);\r\n        frameGame.add(menuBarView);\r\n\r\n        graphicPanel.setFocusable(true);\r\n        graphicPanel.requestFocus();\r\n        PlayerController playerController=new PlayerController(graphicPanel);\r\n        graphicPanel.addKeyListener(playerController);\r\n        gameLoopObject=new GameLoop(playerController);\r\n        gameLoopObject.start();\r\n    }\r\n\r\n    public static void close() {\r\n        frameGame.dispose();\r\n        gameLoopObject.stop();\r\n        System.exit(0);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/GameFrame.java b/src/main/java/ZombieApocalypse/View/GameFrame.java
--- a/src/main/java/ZombieApocalypse/View/GameFrame.java	(revision d24b9dd187310fda00e56608b258e9edb23d8db6)
+++ b/src/main/java/ZombieApocalypse/View/GameFrame.java	(date 1684590415602)
@@ -45,7 +45,7 @@
         frameGame.setTitle("Game");
 
         MenuBarView menuBarView=new MenuBarView();
-        GraphicPanel graphicPanel=new GraphicPanel(menuBarView);
+        GraphicPanel graphicPanel=new GraphicPanel();
         frameGame.setLayout(new BoxLayout(frameGame.getContentPane(), BoxLayout.PAGE_AXIS));
 
         frameGame.add(graphicPanel);
@@ -56,6 +56,7 @@
         PlayerController playerController=new PlayerController(graphicPanel);
         graphicPanel.addKeyListener(playerController);
         gameLoopObject=new GameLoop(playerController);
+        menuBarView.setBar();
         gameLoopObject.start();
     }
 
Index: src/main/java/ZombieApocalypse/View/GraphicPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport ZombieApocalypse.Model.Game;\r\nimport ZombieApocalypse.Model.World;\r\nimport ZombieApocalypse.Settings;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\n\r\npublic class GraphicPanel extends JPanel {\r\n    //Disegna il mondo\r\n    private final CharacterView characterView = new CharacterView();\r\n    private  final  MenuBarView menuBarView;\r\n    private final int numeroImmagini=4;\r\n    private final Image[] images=new Image[numeroImmagini];\r\n    public GraphicPanel(MenuBarView menuBarView)  {\r\n        this.menuBarView = menuBarView;\r\n        try{\r\n            for(int i=0; i<numeroImmagini; i++){\r\n                String c=String.valueOf(i);\r\n                images[i]= ImageIO.read(getClass().getResourceAsStream(\"/AmbienteDiGioco/Terreno/Terreno\"+c+\".png\"));\r\n\r\n                images[i]=images[i].getScaledInstance(Settings.CELL_SIZEX, Settings.CELL_SIZEY, Image.SCALE_SMOOTH);\r\n\r\n            }} catch (IOException e){\r\n            System.exit(1);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        World world=new World();\r\n        for(int i = 0; i < world.getSize(); i++) {\r\n            int x = i * Settings.CELL_SIZEX;\r\n            for(int j = 0; j < world.getSize(); j++) {\r\n                int y = j * Settings.CELL_SIZEY;\r\n                if(world.isGround0(i, j)) {\r\n                    //Random random=new Random();\r\n                    //int value= random.nextInt(numeroImmagini);\r\n                    g.drawImage(images[0], x, y, null);\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n        g.drawImage(characterView.getCurrentImage(), Game.getInstance().getPlayerCharacter().getX(), Game.getInstance().getPlayerCharacter().getY(), characterView.width, characterView.height, null);\r\n\r\n    }\r\n    public void update() {\r\n        characterView.update();\r\n        if(Game.getInstance().getPlayerCharacter().getHit())   //Esempio di update della Barra\r\n            menuBarView.update();\r\n\r\n        repaint();\r\n    }}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/GraphicPanel.java b/src/main/java/ZombieApocalypse/View/GraphicPanel.java
--- a/src/main/java/ZombieApocalypse/View/GraphicPanel.java	(revision d24b9dd187310fda00e56608b258e9edb23d8db6)
+++ b/src/main/java/ZombieApocalypse/View/GraphicPanel.java	(date 1684590415593)
@@ -12,11 +12,9 @@
 public class GraphicPanel extends JPanel {
     //Disegna il mondo
     private final CharacterView characterView = new CharacterView();
-    private  final  MenuBarView menuBarView;
     private final int numeroImmagini=4;
     private final Image[] images=new Image[numeroImmagini];
-    public GraphicPanel(MenuBarView menuBarView)  {
-        this.menuBarView = menuBarView;
+    public GraphicPanel()  {
         try{
             for(int i=0; i<numeroImmagini; i++){
                 String c=String.valueOf(i);
@@ -54,8 +52,6 @@
     }
     public void update() {
         characterView.update();
-        if(Game.getInstance().getPlayerCharacter().getHit())   //Esempio di update della Barra
-            menuBarView.update();
 
         repaint();
     }}
Index: src/main/java/ZombieApocalypse/Model/PlayerCharacter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.Model;\r\n\r\nimport ZombieApocalypse.Settings;\r\nimport ZombieApocalypse.View.Audio;\r\nimport javax.sound.sampled.*;\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class PlayerCharacter {\r\n    //Gestisce il player e i suoi movimenti\r\n    private int x = 20;\r\n    private int y = 20;\r\n    private boolean sound=false;\r\n    int money=0;\r\n    int health=10;\r\n    boolean movement = false;\r\n    boolean hit=true;  //prova\r\n    private final World world=new World();\r\n    public enum movementDirection{RIGHT, LEFT, UP, DOWN};\r\n    movementDirection dir;\r\n\r\n    Audio audio = new Audio();\r\n\r\n    // Metodo usato per musica in loop, riceve come argomento index da array Audio e lo passa a SetFile\r\n    public void playMusic(int i) {\r\n\r\n        audio.setFile(i);\r\n        audio.play();\r\n        audio.loop();\r\n    }\r\n    public void stopMusic() {\r\n        audio.stop();\r\n    }\r\n    // Metodo usato per i sound effects\r\n    public void playSE(int i) {\r\n        audio.setFile(i);\r\n        audio.play();\r\n    }\r\n\r\n\r\n\r\n    void startMovementUp() {\r\n        movement = true;\r\n        dir=movementDirection.UP;\r\n    }\r\n    void startMovementDown() {\r\n        movement = true;\r\n        dir=movementDirection.DOWN;\r\n    }\r\n    void startMovementRight() {\r\n        movement = true;\r\n        dir=movementDirection.RIGHT;\r\n    }\r\n    void startMovementLeft() {\r\n        movement = true;\r\n        dir=movementDirection.LEFT;\r\n    }\r\n\r\n    void stopMovement() {\r\n        movement = false;\r\n    }\r\n\r\n    public boolean isMoving() {\r\n        return movement;\r\n    }\r\n    public boolean getHit() {\r\n        return hit;\r\n    }\r\n\r\n\r\n    public void move() {\r\n        if(dir==movementDirection.RIGHT && world.isValidCoordinate(getX()+10, getY()))\r\n            x += 10;\r\n        else if(dir==movementDirection.LEFT && world.isValidCoordinate(getX()-10, getY()))\r\n            x -= 10;\r\n        else if(dir==movementDirection.UP && world.isValidCoordinate(getX(), getY()-10))\r\n            y -= 10;\r\n        else if(dir==movementDirection.DOWN && world.isValidCoordinate(getX(), getY()+10))\r\n            y += 10;\r\n        else\r\n            movement=false;\r\n        if(sound){\r\n            playSE(0);\r\n            sound=false;}\r\n        else\r\n            sound=true;\r\n\r\n\r\n\r\n    }\r\n\r\n    public int getX() {\r\n        return x;\r\n    }\r\n\r\n    public int getY() {\r\n        return y;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/Model/PlayerCharacter.java b/src/main/java/ZombieApocalypse/Model/PlayerCharacter.java
--- a/src/main/java/ZombieApocalypse/Model/PlayerCharacter.java	(revision d24b9dd187310fda00e56608b258e9edb23d8db6)
+++ b/src/main/java/ZombieApocalypse/Model/PlayerCharacter.java	(date 1684590146560)
@@ -2,6 +2,8 @@
 
 import ZombieApocalypse.Settings;
 import ZombieApocalypse.View.Audio;
+import ZombieApocalypse.View.MenuBarView;
+
 import javax.sound.sampled.*;
 import java.awt.event.KeyEvent;
 import java.io.File;
@@ -12,11 +14,17 @@
     //Gestisce il player e i suoi movimenti
     private int x = 20;
     private int y = 20;
+    private final int playerMaxHealth=6;
+    int getPlayerMaxHealth(){
+        return playerMaxHealth;
+    }
+
+
     private boolean sound=false;
     int money=0;
-    int health=10;
+    int health=5;
     boolean movement = false;
-    boolean hit=true;  //prova
+    boolean hit=false;
     private final World world=new World();
     public enum movementDirection{RIGHT, LEFT, UP, DOWN};
     movementDirection dir;
@@ -69,6 +77,17 @@
         return hit;
     }
 
+    public void hit(){
+        health--;
+
+        MenuBarView.lifeUpdate(false);
+
+    }
+    public void cure(){
+        health++;
+        MenuBarView.lifeUpdate(true);
+    }
+
 
     public void move() {
         if(dir==movementDirection.RIGHT && world.isValidCoordinate(getX()+10, getY()))
Index: src/main/java/ZombieApocalypse/View/MenuBarAnimation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\npublic class MenuBarAnimation {\r\n     //da implementare con il caricamento delle immagini\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java b/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java
--- a/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java	(revision d24b9dd187310fda00e56608b258e9edb23d8db6)
+++ b/src/main/java/ZombieApocalypse/View/MenuBarAnimation.java	(date 1684590508608)
@@ -1,5 +1,38 @@
 package ZombieApocalypse.View;
 
+import javax.swing.*;
+import java.awt.*;
+
 public class MenuBarAnimation {
-     //da implementare con il caricamento delle immagini
+    private static int numImmagini=3;
+    ImageIcon[] images=new ImageIcon[numImmagini];
+
+
+    public MenuBarAnimation(){
+        Image logoS=null;
+        try{
+    for(int i=0; i<numImmagini; i++) {
+        images[i] = new ImageIcon(getClass().getResource("/BarraDistatoeMenu/Icon"+i+".png"));
+        Image im = images[i].getImage();
+        if(i==2)
+            logoS = im.getScaledInstance(55, 55, Image.SCALE_SMOOTH);
+        else
+            logoS = im.getScaledInstance(30, 25, Image.SCALE_SMOOTH);
+        images[i] = new ImageIcon(logoS);
+
+
+    }
+    }catch (NullPointerException e){
+    }}
+
+
+    public ImageIcon setFullHeart() {
+        return images[0];
+    }
+    public ImageIcon setEmptyHeart() {
+        return images[1];
+    }
+    public ImageIcon setEmptySlot() {
+        return images[2];
+    }
 }
Index: src/main/java/ZombieApocalypse/View/MenuBarView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.View;\r\n\r\nimport ZombieApocalypse.FontLoad;\r\nimport ZombieApocalypse.Settings;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\nimport static ZombieApocalypse.Utility.PlayerData.nick;\r\n\r\npublic class MenuBarView extends JPanel {\r\n    Font font= FontLoad.getInstance().getPixelFont();\r\n    JLabel playerName;\r\n    JLabel ammoLabel;\r\n    JLabel [] healthLabel;\r\n    JLabel pointLabel;\r\n    JLabel timeLabel;\r\n    JLabel gunLabel1;\r\n    JLabel gunLabel2;\r\n    public MenuBarView(){\r\n        //Crea tre Jpanel\r\n        //Nel primo metto Vita e Munizioni con quattro label\r\n        //nel secondo lo Score\r\n        //nel terzo il tempo\r\n        String playerData;\r\n        playerName=new JLabel(nick);\r\n        playerName.setFont(font);\r\n        playerName.setForeground(Color.WHITE);\r\n        setMaximumSize(new Dimension(Settings.WINDOW_SIZEX, Settings.MENU_BAR_HEIGHT));\r\n        setPreferredSize(new Dimension(Settings.WINDOW_SIZEX, Settings.MENU_BAR_HEIGHT));\r\n        setMinimumSize(new Dimension(Settings.WINDOW_SIZEX, Settings.MENU_BAR_HEIGHT));\r\n        setBackground(Color.BLACK);\r\n        setLayout(new BoxLayout(this, BoxLayout.LINE_AXIS));\r\n\r\n\r\n        //Pannello della Salute\r\n        healthLabel=new JLabel[10];\r\n        JPanel healthAmmoPanel=new JPanel();\r\n        healthAmmoPanel.setLayout(new GridBagLayout());\r\n        healthAmmoPanel.setMaximumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));\r\n        healthAmmoPanel.setMinimumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));\r\n\r\n        GridBagConstraints c=new GridBagConstraints();\r\n        healthAmmoPanel.setBackground(Color.BLACK);\r\n        JLabel jLabelH=new JLabel(\"Health\");\r\n        jLabelH.setFont(font);\r\n        jLabelH.setForeground(Color.GRAY);\r\n        c.gridx=0;\r\n        c.gridy=0;\r\n        healthAmmoPanel.add(jLabelH, c);\r\n\r\n        JPanel array=new JPanel();\r\n        array.setLayout(new BoxLayout(array, BoxLayout.X_AXIS));\r\n        array.setBackground(Color.BLACK);\r\n        for(int i=0; i<6; i++){\r\n            healthLabel[i]=new JLabel();\r\n            array.add(healthLabel[i]);\r\n        }\r\n        c.gridx=1;\r\n        c.gridy=0;\r\n        c.insets=new Insets(0,5,0,0);\r\n        healthAmmoPanel.add(array, c);\r\n\r\n        //Pannello delle Munizioni\r\n\r\n        JLabel jLabelA=new JLabel(\" Ammo\");\r\n        jLabelA.setFont(font);\r\n        jLabelA.setForeground(Color.GRAY);\r\n        ammoLabel=new JLabel();\r\n        c.gridx=0;\r\n        c.gridy=1;\r\n        healthAmmoPanel.add(jLabelA, c);\r\n        c.gridx=1;\r\n        c.gridy=1;\r\n\r\n        healthAmmoPanel.add(ammoLabel, c);\r\n        //Pannello delle Armi primo\r\n        JPanel gunPanel=new JPanel();\r\n        gunPanel.setMaximumSize(new Dimension(90, Settings.MENU_BAR_HEIGHT));\r\n\r\n        gunPanel.setBackground(Color.BLACK);\r\n        gunPanel.setLayout(new GridBagLayout());\r\n        JLabel jLabelG=new JLabel(\" use\");\r\n        jLabelG.setFont(font);\r\n        jLabelG.setForeground(Color.GRAY);\r\n        JLabel jLabelW=new JLabel(\"W\");\r\n        jLabelW.setFont(font);\r\n        jLabelW.setForeground(Color.WHITE);\r\n        gunLabel1=new JLabel();\r\n        JLabel jLabelD=new JLabel(\"drop\");\r\n        jLabelD.setFont(font);\r\n        jLabelD.setForeground(Color.GRAY);\r\n        JLabel jLabelS=new JLabel(\"S\");\r\n        jLabelS.setFont(font);\r\n        jLabelS.setForeground(Color.WHITE);\r\n        c.gridx=0;\r\n        c.gridy=0;\r\n        gunPanel.add(jLabelG, c);\r\n        c.gridx=0;\r\n        c.gridy=1;\r\n        gunPanel.add(jLabelD, c);\r\n        c.gridy=0;\r\n        c.gridx=1;\r\n        gunPanel.add(jLabelW, c);\r\n        c.gridy=1;\r\n        c.gridx=1;\r\n        gunPanel.add(jLabelS, c);\r\n        //Pannello delle armi 2\r\n        gunLabel2=new JLabel();\r\n        JPanel gunPanel1=new JPanel();\r\n        gunPanel1.setMaximumSize(new Dimension(100, Settings.MENU_BAR_HEIGHT));\r\n        gunPanel1.setBackground(Color.BLACK);\r\n        gunPanel1.setLayout(new GridBagLayout());\r\n        JLabel jLabelE=new JLabel(\"E\");\r\n        jLabelE.setFont(font);\r\n        jLabelE.setForeground(Color.WHITE);\r\n        c.gridx=0;\r\n        c.gridy=0;\r\n        gunPanel1.add(jLabelE, c);\r\n        JLabel jLabelDd=new JLabel(\"D\");\r\n        jLabelDd.setFont(font);\r\n        jLabelDd.setForeground(Color.WHITE);\r\n        c.gridx=0;\r\n        c.gridy=1;\r\n        gunPanel1.add(jLabelDd, c);\r\n        c.gridy=0;\r\n        c.gridx=1;\r\n        JLabel jLabelGg=new JLabel(\"use\");\r\n        jLabelGg.setFont(font);\r\n        jLabelGg.setForeground(Color.GRAY);\r\n        gunPanel1.add(jLabelGg, c);\r\n        c.gridy=1;\r\n        c.gridx=1;\r\n        JLabel jLabelz=new JLabel(\" drop\");\r\n        jLabelz.setFont(font);\r\n        jLabelz.setForeground(Color.GRAY);\r\n        gunPanel1.add(jLabelz, c);\r\n\r\n        //Pannello del Punteggio\r\n        JPanel pointPanel=new JPanel();\r\n        pointPanel.setMaximumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));\r\n\r\n        pointPanel.setLayout(new GridBagLayout());\r\n        pointPanel.setBackground(Color.BLACK);\r\n        JLabel jLabelP=new JLabel(\"Points\");\r\n        jLabelP.setFont(font);\r\n        jLabelP.setForeground(Color.GRAY);\r\n        pointLabel=new JLabel();\r\n        c.insets=new Insets(0,40,0,0);\r\n        c.gridx = 0;\r\n        c.gridy = 0;\r\n        pointPanel.add(jLabelP, c);\r\n        c.gridx = 0;\r\n        c.gridy = 1;\r\n        pointPanel.add(pointLabel,c);\r\n        //Pannello del tempo\r\n        JPanel timePanel=new JPanel();\r\n        timePanel.setMaximumSize(new Dimension(100, Settings.MENU_BAR_HEIGHT));\r\n\r\n        timePanel.setLayout(new GridBagLayout());\r\n        timePanel.setBackground(Color.BLACK);\r\n        JLabel jLabelT=new JLabel(\"Time\");\r\n        jLabelT.setFont(font);\r\n        jLabelT.setForeground(Color.GRAY);\r\n        timeLabel=new JLabel();\r\n        c.insets=new Insets(0,40,0,0);\r\n        c.gridx = 0;\r\n        c.gridy = 0;\r\n        timePanel.add(jLabelT, c);\r\n        c.gridx = 0;\r\n        c.gridy = 1;\r\n        timePanel.add(timeLabel,c);\r\n        add(playerName);\r\n        add(healthAmmoPanel);\r\n        add(gunPanel);\r\n        add(gunLabel1);\r\n        add(new JLabel(\"  \"));\r\n        add(gunLabel2);\r\n        add(gunPanel1);\r\n        add(pointPanel);\r\n        add(timePanel);\r\n    }\r\n\r\n\r\n    public void update()  {\r\n        ImageIcon logo=null;\r\n        ImageIcon logo1=null;\r\n\r\n        logo=new ImageIcon(getClass().getResource(\"/BarraDistatoeMenu/BarraVita.png\"));\r\n        logo1=new ImageIcon(getClass().getResource(\"/BarraDistatoeMenu/SlotVuoto.png\"));\r\n        Image im=logo.getImage();\r\n        Image logoS=im.getScaledInstance(30,25,Image.SCALE_SMOOTH);\r\n        logo=new ImageIcon(logoS);\r\n\r\n        Image im1=logo1.getImage();\r\n        Image logoS1=im1.getScaledInstance(55,55,Image.SCALE_SMOOTH);\r\n        logo1=new ImageIcon(logoS1);\r\n\r\n        for(int i=0; i<6; i++){\r\n            healthLabel[i].setIcon(logo);\r\n\r\n        }\r\n        gunLabel1.setIcon(logo1);\r\n        gunLabel2.setIcon(logo1);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/View/MenuBarView.java b/src/main/java/ZombieApocalypse/View/MenuBarView.java
--- a/src/main/java/ZombieApocalypse/View/MenuBarView.java	(revision d24b9dd187310fda00e56608b258e9edb23d8db6)
+++ b/src/main/java/ZombieApocalypse/View/MenuBarView.java	(date 1684590415611)
@@ -1,6 +1,7 @@
 package ZombieApocalypse.View;
 
 import ZombieApocalypse.FontLoad;
+import ZombieApocalypse.Model.Game;
 import ZombieApocalypse.Settings;
 
 import javax.swing.*;
@@ -10,19 +11,20 @@
 
 public class MenuBarView extends JPanel {
     Font font= FontLoad.getInstance().getPixelFont();
+    static MenuBarAnimation iconImages=new MenuBarAnimation();
     JLabel playerName;
+     JPanel flashPanel;
     JLabel ammoLabel;
-    JLabel [] healthLabel;
+     static JLabel [] healthLabel;
     JLabel pointLabel;
     JLabel timeLabel;
-    JLabel gunLabel1;
+     JLabel gunLabel1;
     JLabel gunLabel2;
     public MenuBarView(){
         //Crea tre Jpanel
         //Nel primo metto Vita e Munizioni con quattro label
         //nel secondo lo Score
         //nel terzo il tempo
-        String playerData;
         playerName=new JLabel(nick);
         playerName.setFont(font);
         playerName.setForeground(Color.WHITE);
@@ -34,7 +36,7 @@
 
 
         //Pannello della Salute
-        healthLabel=new JLabel[10];
+        healthLabel=new JLabel[Game.getInstance().getPlayerMaxLife()];
         JPanel healthAmmoPanel=new JPanel();
         healthAmmoPanel.setLayout(new GridBagLayout());
         healthAmmoPanel.setMaximumSize(new Dimension(300, Settings.MENU_BAR_HEIGHT));
@@ -52,7 +54,7 @@
         JPanel array=new JPanel();
         array.setLayout(new BoxLayout(array, BoxLayout.X_AXIS));
         array.setBackground(Color.BLACK);
-        for(int i=0; i<6; i++){
+        for(int i=0; i<Game.getInstance().getPlayerMaxLife(); i++){
             healthLabel[i]=new JLabel();
             array.add(healthLabel[i]);
         }
@@ -60,6 +62,9 @@
         c.gridy=0;
         c.insets=new Insets(0,5,0,0);
         healthAmmoPanel.add(array, c);
+        flashPanel=new JPanel();
+        flashPanel.setOpaque(false);
+        healthAmmoPanel.add(flashPanel, c);
 
         //Pannello delle Munizioni
 
@@ -181,32 +186,37 @@
         add(timePanel);
     }
 
+    public static void lifeUpdate(boolean b) {
+        if(b && Game.getInstance().getPlayerMaxLife()<Game.getInstance().getPlayerLife()){
+            healthLabel[Game.getInstance().getPlayerLife()].setIcon(iconImages.setFullHeart());
 
-    public void update()  {
-        ImageIcon logo=null;
-        ImageIcon logo1=null;
+        }
+        else if (!b && Game.getInstance().getPlayerLife()>-1){
+            healthLabel[Game.getInstance().getPlayerLife()+1].setIcon(iconImages.setEmptyHeart());
 
-        logo=new ImageIcon(getClass().getResource("/BarraDistatoeMenu/BarraVita.png"));
-        logo1=new ImageIcon(getClass().getResource("/BarraDistatoeMenu/SlotVuoto.png"));
-        Image im=logo.getImage();
-        Image logoS=im.getScaledInstance(30,25,Image.SCALE_SMOOTH);
-        logo=new ImageIcon(logoS);
+        }
 
-        Image im1=logo1.getImage();
-        Image logoS1=im1.getScaledInstance(55,55,Image.SCALE_SMOOTH);
-        logo1=new ImageIcon(logoS1);
+    }
+    public void setBar() {
+        for(int i=0; i<Game.getInstance().getPlayerMaxLife(); i++){
+            if(i<Game.getInstance().getPlayerLife())
+            healthLabel[i].setIcon(iconImages.setFullHeart());
+            else
+                healthLabel[i].setIcon(iconImages.setEmptyHeart());
 
-        for(int i=0; i<6; i++){
-            healthLabel[i].setIcon(logo);
+        }
+        gunLabel1.setIcon(iconImages.setEmptySlot());
+        gunLabel2.setIcon(iconImages.setEmptySlot());
 
-        }
-        gunLabel1.setIcon(logo1);
-        gunLabel2.setIcon(logo1);
+    }
 
 
 
 
 
 
-    }
+
+
+
+
 }
Index: src/main/java/ZombieApocalypse/Model/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.Model;\r\n\r\nimport ZombieApocalypse.View.GameFrame;\r\n\r\npublic class Game {\r\n    //Gestisce gli aspetti del gioco\r\n    private final World world = new World();\r\n    private final PlayerCharacter character = new PlayerCharacter();\r\n\r\n    private static final Game instance = new Game();\r\n    private Game() {\r\n    }\r\n    public static Game getInstance() {\r\n        return instance;\r\n    }\r\n\r\n    public void startMovementRight() {\r\n        character.startMovementRight();}\r\n    public void startMovementUp() {\r\n        character.startMovementUp();\r\n\r\n    }\r\n\r\n    public void startMovementDown() {\r\n        character.startMovementDown();\r\n    }\r\n    public void startMovementLeft() {\r\n        character.startMovementLeft();\r\n    }\r\n\r\n    public void stopMovement() {\r\n        character.stopMovement();\r\n    }\r\n\r\n    //Da fare nel Game Loop\r\n    public void update() {\r\n        if(character.isMoving())\r\n            character.move();}\r\n\r\n\r\n\r\n    public PlayerCharacter getPlayerCharacter() {\r\n        return character;}\r\n\r\n    public PlayerCharacter.movementDirection getPlayerDirection() {\r\n        return character.dir;}\r\n\r\n    public void closeGame() {\r\n        GameFrame.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ZombieApocalypse/Model/Game.java b/src/main/java/ZombieApocalypse/Model/Game.java
--- a/src/main/java/ZombieApocalypse/Model/Game.java	(revision d24b9dd187310fda00e56608b258e9edb23d8db6)
+++ b/src/main/java/ZombieApocalypse/Model/Game.java	(date 1684588004691)
@@ -1,6 +1,7 @@
 package ZombieApocalypse.Model;
 
 import ZombieApocalypse.View.GameFrame;
+import ZombieApocalypse.View.MenuBarView;
 
 public class Game {
     //Gestisce gli aspetti del gioco
@@ -32,6 +33,7 @@
         character.stopMovement();
     }
 
+
     //Da fare nel Game Loop
     public void update() {
         if(character.isMoving())
@@ -41,6 +43,10 @@
 
     public PlayerCharacter getPlayerCharacter() {
         return character;}
+    public int getPlayerLife() {
+        return character.health;}
+    public int getPlayerMaxLife() {
+        return character.getPlayerMaxHealth();}
 
     public PlayerCharacter.movementDirection getPlayerDirection() {
         return character.dir;}
@@ -48,4 +54,6 @@
     public void closeGame() {
         GameFrame.close();
     }
+
+
 }
