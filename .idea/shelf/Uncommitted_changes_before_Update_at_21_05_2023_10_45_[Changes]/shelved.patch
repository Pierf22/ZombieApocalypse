Index: src/main/java/ZombieApocalypse/LoginMenu/LoginPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ZombieApocalypse.LoginMenu;\r\n\r\nimport ZombieApocalypse.ResourcesLoader;\r\nimport ZombieApocalypse.View.GameFrame;\r\nimport ZombieApocalypse.Utility.PlayerData;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.io.*;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.sql.*;\r\nimport java.util.Random;\r\n\r\npublic class LoginPanel extends JPanel {\r\n    private final int setBg;       //Variabile che mi serve per settare lo sfondo della schermata di login\r\n    private Font font;              //Variabile in cui si carica il font\r\n    private JLabel titolo;       //Label per visualizzare il titolo\r\n    private JButton btnSend, showPassword;     //Bottone per inviare i dati e l'altro per visualizzare la password\r\n    private JTextField txtNickname;  //Per inserire il nickname\r\n    private JPasswordField txtPassword; //Per inserire la password\r\n    private JLabel lblNickame;   //Label per nickname\r\n    private JLabel lblPassword;  //Label per password\r\n    private JPanel panelNickname, panelPasswod, imagePanel, pannelloBottone;    //Pannelli per contenere gli elementi\r\n    private int borderValueRight, borderValueLeft;  //Variabili che contengono il bordo destro e sinistro dell'animazione\r\n    private boolean cambio = false, show = false;   //la variabile cambio serve per cambiare il verso dell'animazione del titolo, show invece per mostrare o nascondere la password\r\n\r\n    public LoginPanel() {\r\n        //Carico il font personalizzato\r\n        font = ResourcesLoader.getInstance().getPixelFont();\r\n\r\n        //setBg contiene un numero casuale da 1 a 4, utile per settare un immagine casuale a ogni avvio\r\n        setBg = new Random().nextInt(1, 4);\r\n\r\n        //Inizializzo i componenti da inserire nel pannello principale\r\n        initComponent();\r\n\r\n        //Settando il valore di borderValueLeft a 100 dico all'animazione del titolo di iniziare andando verso sinistra\r\n        borderValueLeft = 100;\r\n        borderValueRight = titolo.getBorder().getBorderInsets(titolo).right;\r\n\r\n        //Setto il layout del pannello principale\r\n        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\r\n\r\n        //Inserisco ora i componenti nel pannello principale\r\n        this.add(imagePanel);\r\n        this.add(panelNickname);\r\n        this.add(panelPasswod);\r\n        this.add(pannelloBottone);\r\n    }\r\n\r\n    private void initComponent() {\r\n        //Creo la label titolo\r\n        titolo = new JLabel();\r\n        //Creo la icon da inserire nella label titolo\r\n        titolo.setIcon(new ImageIcon(this.getClass().getResource(\"/GameTitle/title.png\")));\r\n        //Setto le dimensioni della label titolo e il bordo\r\n        titolo.setMinimumSize(new Dimension(750, 138));\r\n        titolo.setMaximumSize(new Dimension(750, 138));\r\n        titolo.setBorder(new EmptyBorder(20, 0, 0, 0));\r\n        //creo il pannello dove metto la label titolo\r\n        imagePanel = new JPanel();\r\n        imagePanel.add(titolo);\r\n        imagePanel.setOpaque(false);\r\n        imagePanel.setMaximumSize(new Dimension(800, 200));\r\n\r\n        //Creo la label per il nickname\r\n        lblNickame = new JLabel(\"Nickname: \");\r\n        lblNickame.setFont(font);\r\n        lblNickame.setMinimumSize(new Dimension(180, 30));\r\n        lblNickame.setMaximumSize(new Dimension(180, 30));\r\n        lblNickame.setFont(font.deriveFont(Font.PLAIN, 30));\r\n        //Ora creo il campo di input dove inserire il nickname\r\n        txtNickname = new JTextField();\r\n        //Qui vado a creare una label in cui andrò ad inserire il campo di input per dargli una grafica\r\n        JLabel label1 = new JLabel(new ImageIcon(getClass().getResource(\"/LoginInterface/txtGUI.png\")));\r\n        label1.setLayout(new BorderLayout());\r\n        label1.add(txtNickname);\r\n        txtNickname.setOpaque(false);\r\n        //Con questa istruzione vado a far iniziare il testo del campo di input spostato leggermente a sinistra, tutto per un fattore estetico\r\n        txtNickname.setBorder(BorderFactory.createCompoundBorder(txtNickname.getBorder(), BorderFactory.createEmptyBorder(0, 5, 0, 0)));\r\n        txtNickname.setBackground(new Color(0, 0, 0 ,0));\r\n        txtNickname.setFont(font.deriveFont(Font.PLAIN, 18));\r\n        txtNickname.setMinimumSize(new Dimension(300, 45));\r\n        txtNickname.setMaximumSize(new Dimension(350, 45));\r\n        txtNickname.setForeground(Color.WHITE);\r\n        //vado ad impostare il focus di default sul campo di input del nickname\r\n        txtNickname.setFocusable(true);\r\n        txtNickname.requestFocus();\r\n        //Funzione per cambiare colore al puntatore del mouse nel textfield\r\n        txtNickname.setCaretColor(Color.RED);\r\n        //Evento per settare il numero massimo di caratteri nel campo di input\r\n        txtNickname.addKeyListener(new KeyAdapter() {\r\n            @Override\r\n            public void keyTyped(KeyEvent e) {\r\n                super.keyTyped(e);\r\n                if(txtNickname.getText().length() > 20)\r\n                    e.consume();\r\n            }\r\n        });\r\n        //Inserisco tutto nel pannello\r\n        panelNickname = new JPanel();\r\n        panelNickname.setOpaque(false);\r\n        panelNickname.setLayout(new BoxLayout(panelNickname, BoxLayout.X_AXIS));\r\n        panelNickname.add(lblNickame);\r\n        panelNickname.add(label1);\r\n\r\n        //Creo la label per il campo password\r\n        lblPassword = new JLabel(\"Password: \");\r\n        lblPassword.setFont(font);\r\n        lblPassword.setMinimumSize(new Dimension(230, 50));\r\n        lblPassword.setMaximumSize(new Dimension(230, 50));\r\n        lblPassword.setFont(font.deriveFont(Font.PLAIN, 30));\r\n        //ora creo il campo password\r\n        txtPassword = new JPasswordField();\r\n        //Qui vado a dare un bordo al campo password per far si che sia allineato al campo sopra. Infatti senza questo bordo sarebbero disallineati in quanto è presente un bottone in più affianco al campo password\r\n        lblPassword.setBorder(new EmptyBorder(0, 57, 0, 0));\r\n        //Creo la label come ho fatto anche sopra\r\n        JLabel label2 = new JLabel(new ImageIcon(getClass().getResource(\"/LoginInterface/txtGUI.png\")));\r\n        label2.setLayout(new BorderLayout());\r\n        label2.add(txtPassword);\r\n        txtPassword.setOpaque(false);\r\n        txtPassword.setBorder(BorderFactory.createCompoundBorder(txtPassword.getBorder(), BorderFactory.createEmptyBorder(0, 5, 0, 0)));\r\n        txtPassword.setBackground(new Color(0,0, 0 ,0));\r\n        txtPassword.setFont(font.deriveFont(Font.PLAIN, 18));\r\n        txtPassword.setMinimumSize(new Dimension(300, 45));\r\n        txtPassword.setMaximumSize(new Dimension(355, 45));\r\n        //faccio in modo che la password venga rimpiazzata dal carattere '-'\r\n        txtPassword.setEchoChar('-');\r\n        txtPassword.setForeground(Color.white);\r\n        //Funzione per cambiare colore al puntatore del mouse nel passwordfield\r\n        txtPassword.setCaretColor(Color.RED);\r\n        //qua creo il pulsante per mostare/nascondere la password\r\n        showPassword = new JButton(\"\", new ImageIcon(getClass().getResource(\"/LoginInterface/show.png\")));\r\n        showPassword.setBorderPainted(false);\r\n        showPassword.setBackground(new Color(37, 40, 80));\r\n        showPassword.setOpaque(false);\r\n        showPassword.setFocusPainted(false);\r\n        //Qua vado ad assegnare la bottone un mouse listener per far si che quando la password è nascosta venga mostrata e viceversa\r\n        showPassword.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mousePressed(MouseEvent e) {\r\n                super.mousePressed(e);\r\n                if(!show){\r\n                    show = true;\r\n                    //Carattere per visualizzare la password\r\n                    txtPassword.setEchoChar('\\u0000');\r\n                    showPassword.setIcon(new ImageIcon(getClass().getResource(\"/LoginInterface/hide.png\")));\r\n                }\r\n                else{\r\n                    show = false;\r\n                    txtPassword.setEchoChar('-');\r\n                    showPassword.setIcon(new ImageIcon(getClass().getResource(\"/LoginInterface/show.png\")));\r\n                }\r\n            }\r\n        });\r\n        //Metto tutto nel pannello\r\n        panelPasswod = new JPanel();\r\n        panelPasswod.setOpaque(false);\r\n        panelPasswod.setLayout(new BoxLayout(panelPasswod, BoxLayout.X_AXIS));\r\n        panelPasswod.add(lblPassword);\r\n        panelPasswod.add(label2);\r\n        panelPasswod.add(showPassword);\r\n        panelPasswod.setBorder(new EmptyBorder(30, 0, 0, 0));\r\n\r\n        //Creo il pannello per contenere il bottone\r\n        btnSend = new JButton(\"Send\", new ImageIcon(getClass().getResource(\"/LoginInterface/sendButton.png\")));\r\n        btnSend.setHorizontalTextPosition(JButton.CENTER);\r\n        btnSend.setVerticalTextPosition(JButton.CENTER);\r\n        btnSend.setFont(font);\r\n        btnSend.setForeground(Color.WHITE);\r\n        btnSend.setFont(font.deriveFont(Font.PLAIN, 30));\r\n        btnSend.setMinimumSize(new Dimension(197, 60));\r\n        btnSend.setMaximumSize(new Dimension(197, 60));\r\n        //Do un evento al pulsante 'SEND', quando viene premuto testa le credenziali di accesso\r\n        btnSend.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mousePressed(MouseEvent e) {\r\n                super.mousePressed(e);\r\n                try {\r\n                    if((txtNickname.getText().length() > 0) && (txtPassword.getPassword().length > 0))\r\n                        //Chiamata funzione\r\n                        controlloCredenziali();\r\n                } catch (SQLException | NoSuchAlgorithmException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            }\r\n        });\r\n        //Metto il bottone nel suo pannello\r\n        pannelloBottone = new JPanel();\r\n        pannelloBottone.setOpaque(false);\r\n        pannelloBottone.setLayout(new BoxLayout(pannelloBottone, BoxLayout.X_AXIS));\r\n        pannelloBottone.add(btnSend);\r\n        pannelloBottone.setBorder(new EmptyBorder(30, 0, 0, 0));\r\n\r\n        //Se lo sfondo è impostato sul secondo o quarto (sfondi scuri) rendo le scritte più chiare, per una questione di legibilità\r\n        if(setBg == 2 || setBg == 4){\r\n            lblNickame.setForeground(Color.WHITE);\r\n            lblPassword.setForeground(Color.WHITE);\r\n        }\r\n    }\r\n\r\n    private void controlloCredenziali() throws SQLException, NoSuchAlgorithmException {\r\n        //come prima cosa mi prendo i valori dal campo password e nickname\r\n        PlayerData.nick = txtNickname.getText();\r\n        PlayerData.pass = new String(txtPassword.getPassword());\r\n\r\n        //chiamo la funzione di crittografia\r\n        PlayerData.pass = crittografia(PlayerData.pass);\r\n\r\n        //effettuo la conessione col db\r\n        String url = \"jdbc:sqlite:player.db\";\r\n        Connection con = DriverManager.getConnection(url);\r\n\r\n        //con questa query vado a contare il numero di utenti nel db che hanno lo stesso nick e la stessa pass di quelli inseriti\r\n        String query = \"select count(*) from player where Nickname=? AND Password=?;\";\r\n        PreparedStatement stmt = con.prepareStatement(query);\r\n        //setto il primo parametro della query 'Nickname' a playerData.nick\r\n        stmt.setString(1, PlayerData.nick);\r\n        //setto il secondo parametro della query 'Password' a playerData.pass\r\n        stmt.setString(2, PlayerData.pass);\r\n        //eseguo la query e metto il risultato in rs\r\n        ResultSet rs = stmt.executeQuery();\r\n\r\n        //se il numero nel db di utenti è uguale a 1 effettuo il login\r\n        if(rs.getInt(1) == 1){\r\n            GameFrame.gameLaunch();\r\n            GameFrame.loop.stop();\r\n        }\r\n        else{\r\n            //Altrimenti verifico se il nickname è già stato usato\r\n            query = \"select count(*) from player where Nickname=?;\";\r\n            stmt = con.prepareStatement(query);\r\n            stmt.setString(1, PlayerData.nick);\r\n            rs = stmt.executeQuery();\r\n            if(rs.getInt(1) == 1){\r\n                //Se è già stato usato comunico con una scritta all'utente che il nickname non è disponibilen (essendo chiave primaria devono essere tutti diversi)\r\n                txtNickname.setText(\"Nickname not available!\");\r\n                txtNickname.setForeground(Color.RED);\r\n                txtPassword.setText(\"\");\r\n\r\n                txtNickname.addFocusListener(new FocusAdapter() {\r\n                    @Override\r\n                    public void focusGained(FocusEvent e) {\r\n                        super.focusGained(e);\r\n                        if(txtNickname.getText().equals(\"Nickname not available!\")){\r\n                            txtNickname.setText(\"\");\r\n                            txtPassword.setText(\"\");\r\n                            txtNickname.setForeground(Color.white);\r\n                        }\r\n                    }\r\n                });\r\n                txtPassword.addFocusListener(new FocusAdapter() {\r\n                    @Override\r\n                    public void focusGained(FocusEvent e) {\r\n                        super.focusGained(e);\r\n                        if(txtNickname.getText().equals(\"Nickname not available!\")){\r\n                            txtNickname.setText(\"\");\r\n                            txtPassword.setText(\"\");\r\n                            txtNickname.setForeground(Color.white);\r\n                        }\r\n                    }\r\n                });\r\n            } else{\r\n                //Altrimenti se non è stato usato registro il player e lo faccio accedere al gioco\r\n                GameFrame.gameLaunch();\r\n                query = \"insert into Player(Nickname, Password) values(?, ?)\";\r\n                stmt = con.prepareStatement(query);\r\n                stmt.setString(1, PlayerData.nick);\r\n                stmt.setString(2, PlayerData.pass);\r\n                stmt.execute();\r\n                GameFrame.loop.stop();\r\n            }\r\n        }\r\n\r\n        //chiudo la connessione col db\r\n        stmt.close();\r\n        con.close();\r\n    }\r\n\r\n    private String crittografia(String pass) throws NoSuchAlgorithmException {\r\n        //per crittografare uso la funzione id hash MD5, quindi creo la stringa criptata e la restituisco al programma\r\n        MessageDigest m = MessageDigest.getInstance(\"MD5\");\r\n        //aggiorna il digest usando la password\r\n        m.update(pass.getBytes());\r\n        byte[] bytes = m.digest();\r\n        StringBuilder s = new StringBuilder();\r\n        for(int i=0; i< bytes.length ;i++)\r\n            //creo la stringa\r\n            s.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\r\n        return s.toString();\r\n    }\r\n\r\n    public void updatePosition(){\r\n        //Questa funzione serve per l'animazione del titolo\r\n\r\n        //se è verificata questa condizione vuol dire che l'animazione deve spostarsi verso sinistra\r\n        if(borderValueRight < 100 && !cambio){\r\n            //Quindi incremento il bordo destro per farlo spostare verso sinistra\r\n            borderValueRight += 3;\r\n            //se il bordo di sinistra è maggiore di 0 devo decrementarlo per evitare di farlo uscire dallo schermo\r\n            if(borderValueLeft > 0)\r\n                borderValueLeft -= 3;\r\n            //Qua setto i nuovi bordi\r\n            titolo.setBorder(new EmptyBorder(20, borderValueLeft, 0, borderValueRight));\r\n        }\r\n        else if(borderValueRight >= 100)\r\n            //quando il bordo destro arriva sopra il valore 100 inverto il senso dell'animazione\r\n            cambio = true;\r\n\r\n        //se è verificata questa condizione vuol dire che l'animazione deve spostarsi verso destra\r\n        if(borderValueLeft < 100 && cambio){\r\n            //incremento il bordo sinistro per farlo spostare verso destra\r\n            borderValueLeft += 3;\r\n            //se il bordo di destra è maggiore di 0 devo decrementarlo per evitare di farlo uscire dallo schermo\r\n            if(borderValueRight > 0)\r\n                borderValueRight -= 3;\r\n            //setto i nuovi bordi\r\n            titolo.setBorder(new EmptyBorder(20, borderValueLeft, 0, borderValueRight));\r\n        }\r\n        else if(borderValueLeft >= 100)\r\n            //quando il bordo sinistro arriva sopra il valore 100 inverto il senso dell'animazione\r\n            cambio = false;\r\n    }\r\n\r\n    @Override\r\n    public void paintComponent(Graphics g){\r\n            //Con questo paintComponent vado a impostare un immagine casuale come sfondo al login\r\n            super.paintComponent(g);\r\n            Image bgImage = null;       //Immagine da disegnare\r\n\r\n            try{\r\n                //Qui vado a leggere una sola immagine casuale tra le quattro disponibili\r\n                bgImage = ImageIO.read(getClass().getResourceAsStream(\"/LoginBackground/War\" + setBg + \".png\"));\r\n            } catch(IOException e){ e.printStackTrace(); }\r\n\r\n            //Disegno l'immagine come sfondo del panel\r\n            g.drawImage(bgImage, 0, 0, null);\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/ZombieApocalypse/LoginMenu/LoginPanel.java b/src/main/java/ZombieApocalypse/LoginMenu/LoginPanel.java
--- a/src/main/java/ZombieApocalypse/LoginMenu/LoginPanel.java	
+++ b/src/main/java/ZombieApocalypse/LoginMenu/LoginPanel.java	
@@ -30,7 +30,7 @@
 
     public LoginPanel() {
         //Carico il font personalizzato
-        font = ResourcesLoader.getInstance().getPixelFont();
+        font = ResourcesLoader.getInstance().getFont("/Font/PixelFont.otf", 20, Font.PLAIN);
 
         //setBg contiene un numero casuale da 1 a 4, utile per settare un immagine casuale a ogni avvio
         setBg = new Random().nextInt(1, 4);
